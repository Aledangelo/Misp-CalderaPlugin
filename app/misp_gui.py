import logging
from aiohttp_jinja2 import template, web

from app.service.auth_svc import for_all_public_methods, check_authorization
from app.utility.base_world import BaseWorld
from plugins.misp.app.misp_svc import MispService


@for_all_public_methods(check_authorization)
class MispGUI(BaseWorld):

    def __init__(self, services, name, description):
        self.name = name
        self.description = description
        self.services = services
        self.misp_svc = MispService(services)

        self.auth_svc = services.get('auth_svc')
        self.log = logging.getLogger('misp_gui')

    @template('misp.html')
    async def splash(self, request):
        return dict(name=self.name, description=self.description)

    # Add functions here that the front-end will use
    async def start(self, request):
        data = await request.json()
        self.log.info("[Misp Plugin] Starting...")
        event = await self.misp_svc.search_event(event_id=data['event'], misp_base_url=data['base_url'], misp_api_key=data['api_key'])
        abilities = await self.misp_svc.load_abilities()
        my_abilities = await self.misp_svc.analyze_galaxies(event=event, platform=data['platform'], abilities=abilities)
        operation = await self.misp_svc.save_operation(op_name=event['Event']['info'] + "_Op", adv_name=event['Event']['info'] + "_Adv", adv_description="Generated by Plugin", abilities=my_abilities)
        return web.json_response(operation.display)
